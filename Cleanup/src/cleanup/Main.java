package cleanup;

import java.io.File;
import java.io.FileWriter;
import java.util.Arrays;

public class Main {
	
	private static final File NULLFILE = new File("/tmp");
	private static final String HELP = 
			  "This tool cleans up a folder, or a list hierarchy of folders\n"
			+ "by deleting the files in the directory based on the rules set\n"
			+ "in the .cleanup file. The format of the file is fairly simple\n"
			+ "and a basic version of it can be generated by the tool as well.\n\n"
			+ "Usage\n"
			+ "    java -jar cleanup.jar -[l|g|h|r] [folderToCleanUp]\n\n"
			+ "Parameters\n"
			+ "    -h  :  Shows this help.\n"
			+ "    -g  :  Generates an example of the .cleanup file in the\n"
			+ "           directory set as a parameter.\n"
			+ "    -l  :  Lists the files and doesn't remove anything.\n"
			+ "    -r  :  Recoursively cleanup the folders.\n\n"
			+ "Note: the parameters should be entered separately.";
	private static final String SAMPLE_FILE = 
			  "# This is a comment. You can use comments in the properties-file manner from Java.\n"
			+ "# Uncomment any of the configuration lines to activate the given rule.\n\n\n"
			+ "# The following line is a date cleanup. It performs The only value for a date cleanup,\n"
			+ "# that must be set is the amount part, thus falling back to the default behaviour and\n"
			+ "# removes files older than the number of days entered.\n"
			+ "# The following line removes files accessed more than five days ago.\n"
			+ "#date 5\n"
			+ "#\n"
			+ "# The following line is the same as the previous.\n"
			+ "#date access +5d"
			+ "#\n"
			+ "# This is the regex format of the command: date (create|edit|access)? ([+-]?)([0-9]+)([shmdwMy])\n\n"
			+ "# The second way of deleting files is limiting the amount of files. In that case the\n"
			+ "# sorting of the files is done either by the name or by the 'lastModified' value. You\n"
			+ "# can also specify the sorting order (default is desc).\n"
			+ "#\n"
			+ "# The following line limits the number of files in the folder to the newest five.\n"
			+ "#amount date 5\n"
			+ "# The regex of the rule is: amount (name|date) (asc|desc)? [0-9]+";
	
	private final String [] ARGS;
	
	private Boolean isRecoursive = null;
	private Boolean isListing = null;
	private File folder = NULLFILE;
	
	private Main(String [] args) {
		this.ARGS = args;
		
		switch(getAction()) {
		case CLEAN: 		performCleanup(); 		break;
		case GENERATE: 		generateConfigFile();	break;
		case HELP:			help();					break;
		default:			help();					break;
		}
	}
	
	public static void main(String [] args) {
		new Main(args);
	}
	
	private void help() {
		System.out.println(HELP);
	}
	
	private void generateConfigFile() {
		generateConfigFile(folder);
	}
	
	private void generateConfigFile(File root) {
		File configFile = new File(root.getAbsolutePath() + "/.cleanup");
		try (FileWriter out = new FileWriter(configFile)) {
			out.write(SAMPLE_FILE);
		} catch (Exception e) {
			System.err.println("Error when creating sample configuration file.");
		}
		if (isRecoursive()) {
			Arrays.asList(configFile.listFiles()).stream()
				.filter(f -> f.isDirectory())
				.forEach(f -> generateConfigFile(f));
		}
	}
	
	private void performCleanup() {
		RuntimeParams pp = new RuntimeParams();
		pp.setRecoursive(isRecoursive());
		pp.setRootDir(getFolder());
		pp.setListing(isListing());
		new CleanupWorker(pp).performCleanup();
	}
	
	private boolean isRecoursive() {
		if (isRecoursive == null) {
			isRecoursive = containsSwitch("-r");
		}
		return isRecoursive;
	}
	
	private boolean isListing() {
		if (isListing == null) {
			isListing = containsSwitch("-l");
		}
		return isListing;
	}
	
	private File getFolder() {
		if (folder == NULLFILE) {
			if (ARGS.length > 0) {
				folder = new File(ARGS[ARGS.length - 1]);
			} else {
				folder = null;
			}
		}
		return folder;
	}
	
	private boolean containsSwitch(String switchValue) {
		boolean ret = false;
		if (switchValue != null) {
			ret = Arrays.asList(ARGS).stream().filter(t -> switchValue.equals(t)).count() > 0;
		}
		return ret;
	}
	
	private Action getAction() {
		Action ret = Action.HELP;
		if (isFolderSet()) {
			if (containsSwitch("-g")) {
				ret = Action.GENERATE;
			} else
			if (!containsSwitch("-h")) {
				ret = Action.CLEAN;
			}
		}
		return ret;
	}
	
	private boolean isFolderSet() {
		return folder != null && folder.exists() && folder.isDirectory();
	}
	
	private enum Action {
		CLEAN,
		GENERATE,
		HELP,
		;
	}

}
